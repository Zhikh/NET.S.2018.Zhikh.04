using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Extension;
using NUnit.Framework;

namespace Extention.Tests
{
    [TestFixture]
    public class DoubleExtensionTests
    {
        [TestCase(-255.255, ExpectedResult = "1100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(255.255, ExpectedResult = "0100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(4294967295.0, ExpectedResult = "0100000111101111111111111111111111111111111000000000000000000000")]
        [TestCase(double.MinValue, ExpectedResult = "1111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.MaxValue, ExpectedResult = "0111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.Epsilon, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(double.NaN, ExpectedResult = "1111111111111000000000000000000000000000000000000000000000000000")]
        [TestCase(double.NegativeInfinity, ExpectedResult = "1111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(double.PositiveInfinity, ExpectedResult = "0111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(-0.0, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(0.0, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(0.2, ExpectedResult = "0011111111001001100110011001100110011001100110011001100110011010")]
        [TestCase(2.0, ExpectedResult = "0100000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(4.940656458412465e-324, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(-4.940656458412465e-324, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(2.22507385850720088902458687609E-308, ExpectedResult = "0000000000001111111111111111111111111111111111111111111111111111")]
        [TestCase(-2.22507385850720138309023271733E-308, ExpectedResult = "1000000000010000000000000000000000000000000000000000000000000000")]
        public string DoubleExtention_DoubleValue_ExpectedResult(double value)
            => value.ToBinaryString();
    }
}
